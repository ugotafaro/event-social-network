version: '3'
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - /var/lib/rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - backend

  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    container_name: kafka
    ports:
      - 9092:9092
      - 9093:9093
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://kafka:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api
      - auth
    networks:
      - backend

  api:
    container_name: api
    build:
      context: ./
      dockerfile: ./apps/api/Dockerfile
    ports:
      - '4000:4000'
    depends_on:
      rabbitmq:
        condition: service_healthy
      auth:
        condition: service_started
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev api
    networks:
      - backend

  auth:
    build:
      context: ./
      dockerfile: ./apps/auth/Dockerfile
    container_name: auth
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    ports:
      - '3000:3000'
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev auth
    networks:
      - backend

  events:
    build:
      context: ./
      dockerfile: ./apps/events/Dockerfile
    container_name: events
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    depends_on:
      - kafka
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev events
    networks:
      - backend

  users:
    build:
      context: ./
      dockerfile: ./apps/users/Dockerfile
    container_name: users
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
    depends_on:
      - kafka
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:dev users
    networks:
      - backend

networks:
  backend:
    driver: bridge
